package com.dam.restaurante.service;



import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.dam.restaurante.dto.PlatoDTO;
import com.dam.restaurante.model.Categoria;
import com.dam.restaurante.model.Ingrediente;
import com.dam.restaurante.model.Plato;
import com.dam.restaurante.model.PlatoIngrediente;
import com.dam.restaurante.model.Restaurante;
import com.dam.restaurante.repository.CategoriaRepository;
import com.dam.restaurante.repository.IngredienteRepository;
import com.dam.restaurante.repository.PlatoIngredienteRepository;
import com.dam.restaurante.repository.PlatoRepository;
import com.dam.restaurante.repository.RestauranteRepository;

@Service
public class PlatoService {

    @Autowired
    private PlatoRepository platoRepository;

    @Autowired
    private CategoriaRepository categoriaRepository;
    
    @Autowired
    private IngredienteRepository ingredienteRepository;

    @Autowired
    private PlatoIngredienteRepository platoIngredienteRepository;
    
    @Autowired
    private RestauranteRepository restauranteRepository;

    public List<PlatoDTO> obtenerTodos() {
        return platoRepository.findAll().stream().map(this::convertirAPlatoDTO).collect(Collectors.toList());
    }

    public List<PlatoDTO> obtenerTodoPlatos() {
        return platoRepository.findAll().stream()
                .map(this::convertirAPlatoDTO)
                .collect(Collectors.toList());
    }
    
    public List<PlatoDTO> obtenerPorRestauranteId(Long restauranteId) {
        
        return platoRepository.findAll().stream()
                .filter(p -> p.getRestaurante().getId().equals(restauranteId))
                .map(this::convertirAPlatoDTO)
                .collect(Collectors.toList());
    }
    
    
    public PlatoDTO obtenerPorId(Long id) {
        return platoRepository.findById(id)
                .map(this::convertirAPlatoDTO)
                .orElseThrow(() -> new RuntimeException("Plato no encontrado"));
    }

    public PlatoDTO crearPlato(PlatoDTO dto) {
        Plato nuevo = new Plato();
        nuevo.setNombre(dto.getNombre());
        nuevo.setDescripcion(dto.getDescripcion());
        nuevo.setPrecio(dto.getPrecio());

        // Buscar categoría por nombre
        Categoria categoria = categoriaRepository.findByNombre(dto.getCategoria())
                .orElseThrow(() -> new RuntimeException("Categoría no encontrada: " + dto.getCategoria()));
        nuevo.setCategoria(categoria);

        // Buscar restaurante por ID
        Restaurante restaurante = restauranteRepository.findById(dto.getRestauranteId())
                .orElseThrow(() -> new RuntimeException("Restaurante no encontrado"));
        nuevo.setRestaurante(restaurante);

        // Guardar el plato
        return convertirAPlatoDTO(platoRepository.save(nuevo));
    }

    public PlatoDTO actualizarPlato(Long id, PlatoDTO dto) {
        Plato existente = platoRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Plato no encontrado"));

        existente.setNombre(dto.getNombre());
        existente.setDescripcion(dto.getDescripcion());
        existente.setPrecio(dto.getPrecio());

        Categoria categoria = categoriaRepository.findByNombre(dto.getCategoria())
                .orElseThrow(() -> new RuntimeException("Categoría no encontrada"));
        existente.setCategoria(categoria);

        Restaurante restaurante = restauranteRepository.findById(dto.getRestauranteId())
                .orElseThrow(() -> new RuntimeException("Restaurante no encontrado"));
        existente.setRestaurante(restaurante);

        return convertirAPlatoDTO(platoRepository.save(existente));
    }

    public void eliminarPlato(Long id) {
        platoRepository.deleteById(id);
    }

    private PlatoDTO convertirAPlatoDTO(Plato p) {
        return new PlatoDTO(
                p.getId(),
                p.getNombre(),
                p.getDescripcion(),
                p.getPrecio(),
                p.getCategoria() != null ? p.getCategoria().getNombre() : null,
                p.getRestaurante() != null ? p.getRestaurante().getId() : null,
                null // lista de ingredientes se puede implementar luego
        );
    }
    
    public void asignarIngredientesAPlato(Long platoId, Map<Long, Double> ingredientesConCantidad) {
        Plato plato = platoRepository.findById(platoId)
                .orElseThrow(() -> new RuntimeException("Plato no encontrado con ID: " + platoId));

        // Elimina relaciones anteriores si las hubiera
        platoIngredienteRepository.deleteByPlatoId(platoId);

        // Recorremos el mapa de ingredientes y cantidad
        for (Map.Entry<Long, Double> entry : ingredientesConCantidad.entrySet()) {
            Long ingredienteId = entry.getKey();
            Double cantidad = entry.getValue();

            Ingrediente ingrediente = ingredienteRepository.findById(ingredienteId)
                    .orElseThrow(() -> new RuntimeException("Ingrediente no encontrado con ID: " + ingredienteId));

            PlatoIngrediente relacion = new PlatoIngrediente();
            relacion.setPlato(plato);
            relacion.setIngrediente(ingrediente);
            relacion.setCantidadNecesaria(cantidad);

            platoIngredienteRepository.save(relacion);
        }
    }
    
 // Modificar cantidad
    public void modificarCantidadIngrediente(Long platoId, Long ingredienteId, Double nuevaCantidad) {
        PlatoIngrediente relacion = platoIngredienteRepository.findByPlatoIdAndIngredienteId(platoId, ingredienteId)
                .orElseThrow(() -> new RuntimeException("Relación no encontrada"));
        relacion.setCantidadNecesaria(nuevaCantidad);
        platoIngredienteRepository.save(relacion);
    }

    // Eliminar ingrediente de plato
    public void eliminarIngredienteDePlato(Long platoId, Long ingredienteId) {
        platoIngredienteRepository.deleteByPlatoIdAndIngredienteId(platoId, ingredienteId);
    }

    // Obtener ingredientes de un plato
    public List<PlatoIngrediente> obtenerIngredientesDePlato(Long platoId) {
        return platoIngredienteRepository.findByPlatoId(platoId);
    }


}
