package com.dam.restaurante.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.dam.restaurante.model.Empleado;
import com.dam.restaurante.model.Restaurante;
import com.dam.restaurante.service.EmpleadoService;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private EmpleadoService empleadoService;

    @GetMapping
    public List<Empleado> obtenerTodos() {
        return empleadoService.obtenerTodos();
    }
    // Endpoint para registrar un empleado
    @PostMapping("/registro")
    public Empleado registrarEmpleado(@RequestBody Empleado empleado) {
        return empleadoService.registrarEmpleado(empleado);
    }

    // Endpoint para verificar el código de verificación
    @PostMapping("/verificar/{idEmpleado}")
    public Empleado verificarCodigo(@PathVariable Long idEmpleado, @RequestParam String codigoVerificacion) {
        return empleadoService.verificarCodigo(idEmpleado, codigoVerificacion);
    }

    // Endpoint para iniciar sesión
    @PostMapping("/login")
    public Empleado login(@RequestParam String correo, @RequestParam String contraseña) {
        return empleadoService.iniciarSesion(correo, contraseña);
    }
    
    @PostMapping("/auth/login")
    public ResponseEntity<?> loginEmpleado(@RequestBody LoginRequest loginRequest) {
        Empleado empleado = empleadoRepository.findByCorreo(loginRequest.getCorreo());

        if (empleado == null || !passwordEncoder.matches(loginRequest.getContraseña(), empleado.getContraseña())) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Correo o contraseña incorrectos");
        }

        if (!empleado.isValidado()) {
            return ResponseEntity.status(HttpStatus.OK).body(Map.of(
                "mensaje", "Primera vez. Introduce el código de verificación",
                "requiereCodigo", true,
                "empleadoId", empleado.getId()
            ));
        }

        return ResponseEntity.ok(Map.of(
            "mensaje", "Inicio de sesión exitoso",
            "requiereCodigo", false,
            "empleadoId", empleado.getId()
        ));
    }

}