package com.dam.restaurante.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.dam.restaurante.dto.IngredienteDTO;
import com.dam.restaurante.model.Ingrediente;
import com.dam.restaurante.repository.IngredienteRepository;

@Service
public class IngredienteService {

    @Autowired
    private IngredienteRepository ingredienteRepository;

    public List<IngredienteDTO> obtenerTodos() {
        return ingredienteRepository.findAll()
                .stream()
                .map(this::toDTO)
                .collect(Collectors.toList());
    }

    public IngredienteDTO obtenerPorId(Long id) {
        return ingredienteRepository.findById(id)
                .map(this::toDTO)
                .orElse(null);
    }

    public IngredienteDTO crearIngrediente(IngredienteDTO dto) {
        Ingrediente ingrediente = toEntity(dto);
        return toDTO(ingredienteRepository.save(ingrediente));
    }

    public IngredienteDTO actualizarIngrediente(Long id, IngredienteDTO dto) {
        Optional<Ingrediente> opt = ingredienteRepository.findById(id);
        if (opt.isPresent()) {
            Ingrediente ingrediente = opt.get();
            ingrediente.setNombre(dto.getNombre());
            ingrediente.setUnidadMedida(dto.getUnidadMedida());
            ingrediente.setCantidadStock(dto.getCantidadStock());
            ingrediente.setPrioridadBaja(dto.getPrioridadBaja());
            ingrediente.setPrioridadMedia(dto.getPrioridadMedia());
            ingrediente.setPrioridadAlta(dto.getPrioridadAlta());
            ingrediente.setProveedor(dto.getProveedor());
            ingrediente.setFotoUrl(dto.getFotoUrl());
            return toDTO(ingredienteRepository.save(ingrediente));
        }
        return null;
    }

    public boolean eliminarIngrediente(Long id) {
        if (ingredienteRepository.existsById(id)) {
            ingredienteRepository.deleteById(id);
            return true;
        }
        return false;
    }

    // Mappers
    private IngredienteDTO toDTO(Ingrediente i) {
        return new IngredienteDTO(
            i.getId(),
            i.getNombre(),
            i.getUnidadMedida(),
            i.getCantidadStock(),
            i.getPrioridadBaja(),
            i.getPrioridadMedia(),
            i.getPrioridadAlta(),
            i.getProveedor(),
            i.getFotoUrl()
        );
    }


    private Ingrediente toEntity(IngredienteDTO dto) {
        Ingrediente i = new Ingrediente();
        i.setId(dto.getId());
        i.setNombre(dto.getNombre());
        i.setUnidadMedida(dto.getUnidadMedida());
        i.setCantidadStock(dto.getCantidadStock());
        i.setPrioridadBaja(dto.getPrioridadBaja());
        i.setPrioridadMedia(dto.getPrioridadMedia());
        i.setPrioridadAlta(dto.getPrioridadAlta());
        i.setProveedor(dto.getProveedor());
        i.setFotoUrl(dto.getFotoUrl());
        return i;
    }
}
